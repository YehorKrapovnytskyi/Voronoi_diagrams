import os
import torch
from detectron2.config import get_cfg
from detectron2.engine import DefaultPredictor
from detectron2.data.datasets import register_coco_instances
from detectron2 import model_zoo
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog
import cv2
import json

from utils import setup_cfg

# Register the test dataset
DATASET_BASE = "../voronoi_dataset"
TEST_DATASET_PATH = os.path.join(DATASET_BASE, "split", "test")

register_coco_instances("voronoi_test_dataset", {}, 
                        os.path.join(TEST_DATASET_PATH, "annotations.json"),
                        os.path.join(TEST_DATASET_PATH, "images"))

cfg = setup_cfg(
    base_config_path="COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml",
    output_dir="./output",
    train_dataset=None,
    val_dataset=None,
    test_dataset="voronoi_test_dataset",
    weights="./output/model_final.pth",
    num_classes=1,
    device="gpu"
)

predictor = DefaultPredictor(cfg)

# Inference on test dataset
dataset_dicts = DatasetCatalog.get("voronoi_test_dataset")
metadata = MetadataCatalog.get("voronoi_test_dataset")

results = []

for d in dataset_dicts:
    im = cv2.imread(d["file_name"])
    outputs = predictor(im)
    instances = outputs["instances"].to("gpu")
    boxes = instances.pred_boxes if instances.has("pred_boxes") else None
    scores = instances.scores if instances.has("scores") else None

    if boxes is not None:
        for box, score in zip(boxes, scores):
            result = {
                "image_id": d["image_id"],
                "bbox": box.tolist(),
                "score": score.item()
            }
            results.append(result)

# Save the results to a JSON file
output_file = os.path.join(cfg.OUTPUT_DIR, "test_results.json")
with open(output_file, "w") as f:
    json.dump(results, f)

print(f"Results saved to {output_file}")
